<!DOCTYPE html>
<html>

<head>
    <title>Market Basket</title>
    <meta http-equiv="X-UA-Compatible" content="IE=7">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="/css/semantic.min.css">
    <link rel="stylesheet" href="/css/formValidation.min.css">

    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="/js/semantic.min.js"></script>
    <script src="/js/formValidation.js"></script>
    <script src="/js/semantic.js"></script>
    <script src="/js/sweetalert.min.js"></script>
    <script src="/js/angular.min.js"></script>
    <script src="/js/angular-cookies.min.js"></script>
    <style>body > .grid {
	height: 100%;
}

.column {
	max-width: 360px;
}</style>

</head>

<body ng-app="app" style="background-color: #dadada;" ng-controller="controller">
<div class="ui middle aligned center aligned grid">
    <div class="column">
        <div class="ui form">
            <div class="ui segment">
                <h1><i class="bx bx-cog"></i></h1>
                <h2>Login</h2>
                <div class="ui center aligned basic segment">
                    <form class="ui form" id="form">
                        <div class="field">
                            <label for=""></label>
                            <input type="text" name="email" ng-model="email" placeholder="Email">
                           
                        </div>
                        <div class="field">
                            <label for=""></label>
                            <input type="password" ng-model="password" name="password" placeholder="Password">
                            
                        </div>
                        <button class="ui primary fluid button" type="submit">Log In</button>
                        <div class="ui divider"></div>
                        <a href="#">Forgot password?</a>
                    </form>
                    <form class="ui form" id="form2">
                        <div class="field">
                            <label for="">Email sent on {{ email }}</label>
                            <input type="text" ng-model="otp" name="otp" placeholder="OTP">
                        </div>
                        <button class="ui primary fluid button" ng-click="verifyOTP()" type="submit">Verify</button>
                        <div class="ui divider"></div>
                    </form>
                    
                </div>
            </div>
        </div>
    </div>
</div>

</body>
<script>
    

    var app = angular.module('app', ['ngCookies']).controller('controller', function ($scope, $http, $cookies) {
        $("#form2").hide();
        // save to db
        $scope.verify = () => {
            $http({
                method: "POST",
                url: "/api/v1/auth/login",
                headers: {
                    "Content-Type": "application/json"
                },
                data: {
                    email:$scope.email,
                    password:$scope.password
                }
            }).then(function (e) {
                setTimeout(() => {
                    $("#form").hide();
                    $("#form2").show();
                });
            }, function (e) {
                console.log(e);
                swal("Error!", e.data.message, "error");
            });
        }

        $scope.verifyOTP = ()=>{
            $http({
                method: "POST",
                url: "/api/v1/auth/login",
                headers: {
                    "Content-Type": "application/json"
                },
                data: {
                    email: $scope.email,
                    password: $scope.password,
                    otp:$scope.otp
                }
            }).then(function (e) {
                console.log(e);
                $cookies.put('authToken', e.data.data, {
                    //expires: new Date(new Date().getTime() + 3600 * 1000), // 1 hour expiry
                    path: '/', // The cookie will be accessible on all pages
                    secure: true, // The cookie will only be sent over HTTPS
                    samesite: 'Strict' // Helps prevent CSRF attacks
                });
                
            }, function (e) {
                console.log(e);
                swal("Error!", e.data.message, "error");
            });
        }

        setTimeout(() => {
            $('#form').formValidation({
                framework: 'semantic',
                icon: {
                    valid: 'bx bx-check icon green',
                    invalid: 'bx bx-x icon',
                    validating: 'bx bx-loader icon',
                    feedback: 'fv-control-feedback'
                },
                event: {
                    title: 'keyup',
                    summary: 'blur',
                },
                fields: {

                    password: {
                        message: 'Password is required',
                        validators: {
                            notEmpty: {
                                message: "Password is required!"
                            }

                        }
                    },
                    email: {
                        message: 'Email is required',
                        validators: {
                            notEmpty: {
                                message: "Email is required!"
                            },
                            emailAddress: {
                                message: 'The input is not a valid email address'
                            }
                        }
                    },

                }
            }).on('success.form.fv', function (e) {
                e.preventDefault();
                $scope.verify();
            });
        }, 0);


    })
    /*.factory('AuthInterceptor', function ($q, $cookies) {
        return {
            request: function (config) {
                var token = $cookies.get('authToken');
                if (token) {
                    config.headers['Authorization'] = token;
                }
                return config;
            },
            responseError: function (response) {
                // Handle errors
                return $q.reject(response);
            }
        };
    })
    .config(function ($httpProvider) {
        $httpProvider.interceptors.push('AuthInterceptor');
    });*/
</script>

</html>